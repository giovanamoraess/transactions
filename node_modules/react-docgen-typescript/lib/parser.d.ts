import * as ts from 'typescript';
export interface StringIndexedObject<T> {
    [key: string]: T;
}
export interface ComponentDoc {
    displayName: string;
    description: string;
    props: Props;
}
export interface Props extends StringIndexedObject<PropItem> {
}
export interface PropItem {
    name: string;
    required: boolean;
    type: PropItemType;
    description: string;
    defaultValue: any;
    parent?: ParentType;
}
export interface Component {
    name: string;
}
export interface PropItemType {
    name: string;
    value?: any;
}
export interface ParentType {
    name: string;
    fileName: string;
}
export declare type PropFilter = (props: PropItem, component: Component) => boolean;
export declare type ComponentNameResolver = (exp: ts.Symbol, source: ts.SourceFile) => string | undefined | null | false;
export interface ParserOptions {
    propFilter?: StaticPropFilter | PropFilter;
    componentNameResolver?: ComponentNameResolver;
}
export interface StaticPropFilter {
    skipPropsWithName?: string[] | string;
    skipPropsWithoutDoc?: boolean;
}
export declare const defaultParserOpts: ParserOptions;
export interface FileParser {
    parse(filePathOrPaths: string | string[]): ComponentDoc[];
    parseWithProgramProvider(filePathOrPaths: string | string[], programProvider?: () => ts.Program): ComponentDoc[];
}
/**
 * Parses a file with default TS options
 * @param filePath component file that should be parsed
 */
export declare function parse(filePathOrPaths: string | string[], parserOpts?: ParserOptions): ComponentDoc[];
/**
 * Constructs a parser for a default configuration.
 */
export declare function withDefaultConfig(parserOpts?: ParserOptions): FileParser;
/**
 * Constructs a parser for a specified tsconfig file.
 */
export declare function withCustomConfig(tsconfigPath: string, parserOpts: ParserOptions): FileParser;
/**
 * Constructs a parser for a specified set of TS compiler options.
 */
export declare function withCompilerOptions(compilerOptions: ts.CompilerOptions, parserOpts?: ParserOptions): FileParser;
export declare function getDefaultExportForFile(source: ts.SourceFile): string;
